// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PCD.Data;

#nullable disable

namespace PCD.API.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250924110535_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PCD.Data.Entities.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("base", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PCD.Data.Entities.Car", b =>
                {
                    b.HasBaseType("PCD.Data.Entities.BaseEntity");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("brand");

                    b.Property<string>("CountryOfRegistration")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("country_of_registartion");

                    b.Property<string>("LicensePlateNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("license_plate_number");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("model");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("VIN")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("vin");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("year");

                    b.HasIndex("UserId");

                    b.ToTable("cars", (string)null);
                });

            modelBuilder.Entity("PCD.Data.Entities.Trip", b =>
                {
                    b.HasBaseType("PCD.Data.Entities.BaseEntity");

                    b.Property<Guid>("CarId")
                        .HasColumnType("uuid")
                        .HasColumnName("car_id");

                    b.Property<double>("Distance")
                        .HasColumnType("double precision")
                        .HasColumnName("distance");

                    b.Property<TimeOnly>("Duration")
                        .HasColumnType("time without time zone")
                        .HasColumnName("duration");

                    b.Property<double>("FuelConsumption")
                        .HasColumnType("double precision")
                        .HasColumnName("fuel_consumption");

                    b.HasIndex("CarId");

                    b.ToTable("trips", (string)null);
                });

            modelBuilder.Entity("PCD.Data.Entities.User", b =>
                {
                    b.HasBaseType("PCD.Data.Entities.BaseEntity");

                    b.Property<string>("DriversLicenseNumber")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("character varying(9)")
                        .HasColumnName("drivers_license_number");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PCD.Data.Entities.Car", b =>
                {
                    b.HasOne("PCD.Data.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("PCD.Data.Entities.Car", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCD.Data.Entities.User", "User")
                        .WithMany("Cars")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PCD.Data.Entities.Trip", b =>
                {
                    b.HasOne("PCD.Data.Entities.Car", "Car")
                        .WithMany("Trips")
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PCD.Data.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("PCD.Data.Entities.Trip", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("PCD.Data.Entities.User", b =>
                {
                    b.HasOne("PCD.Data.Entities.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("PCD.Data.Entities.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PCD.Data.Entities.Car", b =>
                {
                    b.Navigation("Trips");
                });

            modelBuilder.Entity("PCD.Data.Entities.User", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
